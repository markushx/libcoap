# Makefile for libcoap
#
# Copyright (C) 2010,2011 Olaf Bergmann <bergmann@tzi.org>
#
# This file is part of the CoAP library libcoap. Please see
# README for terms of use. 

# the library's version
VERSION:=@PACKAGE_VERSION@

# tools
@SET_MAKE@
SHELL = /bin/sh
MKDIR = mkdir
ETAGS = @ETAGS@

abs_builddir = @abs_builddir@
top_builddir = @top_builddir@
package = @PACKAGE_TARNAME@-@PACKAGE_VERSION@

# files and flags
SOURCES:= pdu.c net.c debug.c encode.c uri.c coap_list.c resource.c hashkey.c \
	 str.c option.c async.c subscribe.c block.c
OBJECTS:= $(patsubst %.c, %.o, $(SOURCES))
HEADERS:=coap.h config.h debug.h pdu.h net.h encode.h uri.h coap_list.h mem.h \
	str.h option.h bits.h uthash.h utlist.h resource.h hashkey.h async.h \
	subscribe.h block.h address.h prng.h coap_time.h
#CFLAGS:=-Wall -Wextra -std=c99 -pedantic @CFLAGS@
#CFLAGS:=-g -std=c99 @CFLAGS@
CFLAGS:=-g @CFLAGS@
CPPFLAGS:=@CPPFLAGS@
DISTDIR=$(top_builddir)/$(package)
SUBDIRS:=examples doc
FILES:=Makefile.in configure configure.in config.h.in $(SOURCES) $(HEADERS)
LIB:=libcoap.a
LIBSO:=libcoap.so
LDFLAGS:=@LIBS@
ARFLAGS:=cru
examples:=examples
doc:=doc
LN:=ln

# SWIG:
SWIGOPT    = -I$(ANDROID_NDK_DIR)/platforms/android-3/arch-arm/usr/include -I$(ANDROID_NDK_DIR)/platforms/android-3/arch-arm/usr/include/linux
SWIG       = swig2.0

TARGET        = coap
#SRCS          = $(SOURCES)
INCLUDES      = -I.
INTERFACE     = coap.i
INTERFACEDIR  = swig/
INTERFACEPATH = $(INTERFACEDIR)$(INTERFACE)

#LIBM       = @LIBM@
#LIBC       = @LIBC@
#LIBCRYPT   = @LIBCRYPT@
#SYSLIBS    = $(LIBM) $(LIBC) $(LIBCRYPT)
#LIBPREFIX  =

IWRAP      = $(INTERFACE:.i=_wrap.i)
ISRCS      = $(IWRAP:.i=.c)
ICXXSRCS   = $(IWRAP:.i=.cxx)
IOBJS      = $(IWRAP:.i=.@OBJEXT@)
#~SWIG

.PHONY: all dirs clean distclean .gitignore doc TAGS

.SUFFIXES:
.SUFFIXES:      .c .o

all:	$(LIB) $(LIBSO) dirs

check:
	echo DISTDIR: $(DISTDIR)
	echo top_builddir: $(top_builddir)
	$(MAKE) -C examples check

dirs:	$(SUBDIRS)
	for dir in $^; do \
		$(MAKE) -C $$dir ; \
	done

$(LIB):	$(OBJECTS)
	$(AR) $(ARFLAGS) $@ $^ 
	ranlib $@

$(LIBSO):	$(OBJECTS)
	$(CC) -shared -Wl,-soname,$(LIBSO).0 -o $(LIBSO).@PACKAGE_VERSION@ $(OBJECTS)

clean:
	@rm -f $(PROGRAM) main.o $(LIB) $(LIBSO) $(OBJECTS) $(WRAPPER) $(WRAPPER_OBJECTS)
	for dir in $(SUBDIRS); do \
		$(MAKE) -C $$dir clean ; \
	done

doc:	
	$(MAKE) -C doc

distclean:	clean
	@rm -rf $(DISTDIR)
	@rm -f *~ $(DISTDIR).tar.gz

dist:	$(FILES) $(SUBDIRS)
	test -d $(DISTDIR) || mkdir $(DISTDIR)
	cp $(FILES) $(DISTDIR)
	for dir in $(SUBDIRS); do \
		$(MAKE) -C $$dir dist; \
	done
	tar czf $(package).tar.gz $(DISTDIR)

TAGS:	
	$(ETAGS) -o $@.new $(SOURCES) 
	$(ETAGS) -a -o $@.new $(HEADERS) 
	mv $@.new $@

.gitignore:
	echo "core\n*~\n*.[oa]\n*.gz\n*.cap\n$(PROGRAM)\n$(DISTDIR)\n.gitignore" >$@

##################################################################
#####                       JAVA                            ######
##################################################################

JAVA_HOME:=$(shell readlink -f /usr/bin/javac | sed "s:/bin/javac::")

# You need to set this variable to the java directories containing the
# files "jni.h" and "md.h"
# usually something like /usr/java/include and /usr/java/include/<arch-osname>.
JAVA_INCLUDE = -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/linux

# Extra Java specific dynamic linking options
JAVA_LIBPREFIX = lib
JAVASO = .so
JAVA_DLNK  = -static-libgcc -shared -Wl,-soname,$(JAVA_LIBPREFIX)$(TARGET)$(JAVASO)
JAVALDSHARED = $(CC)
JAVACXXSHARED = $(CC)
JAVACFLAGS = -fPIC -D__ARM_EABI__=1

# ----------------------------------------------------------------
# Build a java dynamically loadable module (C)
# ----------------------------------------------------------------

java: $(SOURCES) #$(SRCS)
	echo "$(SOURCES)"
	mkdir -p swig/java/de/tzi/coap/jni/
	$(SWIG) -java -includeall -ignoremissing -DJAVA $(SWIGOPT) -package de.tzi.coap.jni -outdir swig/java/de/tzi/coap/jni/ -o swig/java/$(ISRCS) $(INTERFACEPATH)
	$(CC) -c $(CCSHARED) $(CFLAGS) -DJAVA $(JAVACFLAGS) $(SOURCES) swig/java/$(ISRCS) $(INCLUDES) $(JAVA_INCLUDE)
	$(JAVALDSHARED) $(CFLAGS) $(OBJECTS) $(IOBJS) $(JAVA_DLNK) $(LIBS) -o swig/java/$(JAVA_LIBPREFIX)$(TARGET)$(JAVASO)
	@JAVAC@ -sourcepath ./swig/java/ -d ./swig/java swig/java/de/tzi/coap/jni/*.java;
	cd swig/java/; jar cvf jnicoap.jar de/tzi/coap/jni/*.class; cd ../../

# ----------------------------------------------------------------
# Build a java dynamically loadable module (C++)
# ----------------------------------------------------------------

#java_cpp: $(OBJECTS) #$(SRCS)
#	#$(SWIG) -java -c++ -includeall -ignoremissing $(SWIGOPT) -package de.tzi.coap.jni -outdir swig/java/de/tzi/coap/jni/ -o swig/java/$(ICXXSRCS) $(INTERFACEPATH)
#	$(SWIG) -java -c++ -ignoremissing $(SWIGOPT) -package de.tzi.coap.jni -outdir swig/java/de/tzi/coap/jni/ -o swig/java/$(ICXXSRCS) $(INTERFACEPATH)
#	#$(SWIG) -java -c++ $(SWIGOPT) $(INTERFACEPATH)
#	$(CC) -c $(CCSHARED) $(CFLAGS) $(JAVACFLAGS) $(SRCS) $(CXXSRCS) swig/java/$(ICXXSRCS) $(INCLUDES) $(JAVA_INCLUDE)
#	#$(JAVALDSHARED) $(CFLAGS) $(OBJS) $(IOBJS) $(JAVA_DLNK) $(LIBS) -o swig/java/$(JAVA_LIBPREFIX)$(TARGET)$(JAVASO)
#	$(JAVACXXSHARED) $(CFLAGS) $(OBJECTS) $(IOBJS) $(JAVA_DLNK) $(LIBS) $(CPP_DLLIBS) -o $(JAVA_LIBPREFIX)$(TARGET)$(JAVASO)

# -----------------------------------------------------------------
# Cleaning the java examples
# -----------------------------------------------------------------

java_clean:
	rm -f *~ .~* *.class `find ./swig/java -name \*.java | grep -v runme.java`
	rm -f swig/*_wrap*
	rm -rf swig/java/*
	rm -f core @EXTRA_CLEAN@
	rm -f *.@OBJEXT@ *@JAVASO@

javaclient:	java
	@JAVAC@ -cp ./swig/java/ -sourcepath ./examples/java/ -d ./examples/java examples/java/de/tzi/coap/CoapBase.java
	@JAVAC@ -cp ./swig/java/ -sourcepath ./examples/java/ -d ./examples/java examples/java/de/tzi/coap/Client.java

javaserver:	java
	@JAVAC@ -cp ./swig/java/ -sourcepath ./examples/java/ -d ./examples/java examples/java/de/tzi/coap/CoapBase.java
	@JAVAC@ -cp ./swig/java/ -sourcepath ./examples/java/ -d ./examples/java examples/java/de/tzi/coap/Server.java

runjavaserver:	javaserver
	java -cp ./swig/java/jnicoap.jar:examples/java/ -Djava.library.path=./swig/java/ de.tzi.coap.Server
